using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AI;

public class ProceduralPatrolController : MonoBehaviour
{
    public int numberOfPatrolPoints = 3; // Number of patrol points to generate
    public Vector3 patrolAreaSize = new Vector3(10f, 0f, 10f); // Size of the patrol area (X, Y, Z)
    public float waitTimeAtPoint = 1f; // Time spent waiting at each point
    public float sightRange = 7f; // Range within which the fish can detect the player
    public float patrolSpeed = 3f; // Speed for patrolling
    public float chaseSpeed = 2f; // Speed for chasing the player
    public GameObject player; // Reference to the player object

    private List<Vector3> patrolPoints = new List<Vector3>(); // List of generated patrol points
    private int currentPatrolIndex = 0; // Current patrol point index
    private bool isPatrolling = true; // State to check if patrolling
    private bool isWaiting = false; // State to check if waiting
    private bool isChasing = false; // State to check if chasing the player
    private Vector3 patrolAreaCenter; // Center of the patrol area
    private NavMeshAgent navMeshAgent; // Reference to the NavMeshAgent component

    void Start()
    {
        navMeshAgent = GetComponent<NavMeshAgent>();

        if (navMeshAgent == null)
        {
            Debug.LogError("NavMeshAgent component is missing from this GameObject.");
            return;
        }

        patrolAreaCenter = transform.position; // Set the patrol center to the current position
        GeneratePatrolPoints();

        if (patrolPoints.Count == 0)
        {
            Debug.LogWarning("No patrol points generated by ProceduralPatrolController.");
            return;
        }

        if (player == null)
        {
            Debug.LogError("Player not assigned. Please drag and drop the player GameObject in the Inspector.");
        }

        // Start patrolling
        SetPatrolDestination();
    }

    void Update()
    {
        if (player != null && Vector3.Distance(transform.position, player.transform.position) <= sightRange)
        {
            StartChasingPlayer();
        }
        else
        {
            if (isChasing)
            {
                StopChasingPlayer();
            }

            if (isPatrolling && !isWaiting && !isChasing && navMeshAgent.remainingDistance <= navMeshAgent.stoppingDistance)
            {
                StartCoroutine(WaitAtPoint());
            }
        }
    }

    private void GeneratePatrolPoints()
    {
        patrolPoints.Clear();

        for (int i = 0; i < numberOfPatrolPoints; i++)
        {
            float randomX = Random.Range(-patrolAreaSize.x / 2, patrolAreaSize.x / 2);
            float randomZ = Random.Range(-patrolAreaSize.z / 2, patrolAreaSize.z / 2);
            float yPosition = patrolAreaCenter.y; // Maintain the Y level of the patrol area center

            Vector3 randomPoint = new Vector3(patrolAreaCenter.x + randomX, yPosition, patrolAreaCenter.z + randomZ);
            patrolPoints.Add(randomPoint);
        }
    }

    private void SetPatrolDestination()
    {
        if (patrolPoints.Count == 0 || navMeshAgent == null)
            return;

        navMeshAgent.speed = patrolSpeed; // Set patrol speed
        navMeshAgent.SetDestination(patrolPoints[currentPatrolIndex]);
    }

    private void StartChasingPlayer()
    {
        isChasing = true;
        isPatrolling = false;
        isWaiting = false; // Ensure the fish doesn't stay in waiting mode during chasing
        navMeshAgent.speed = chaseSpeed; // Set chase speed
        navMeshAgent.SetDestination(player.transform.position);
    }

    private void StopChasingPlayer()
    {
        isChasing = false;
        isPatrolling = true; // Resume patrolling
        SetPatrolDestination(); // Start moving to the next patrol point
    }

    private IEnumerator WaitAtPoint()
    {
        isWaiting = true;

        // Wait for the specified time
        yield return new WaitForSeconds(waitTimeAtPoint);

        // Move to the next patrol point
        currentPatrolIndex = (currentPatrolIndex + 1) % patrolPoints.Count;
        SetPatrolDestination();

        isWaiting = false;
    }

    // Visualize patrol points and sight range in the editor
    private void OnDrawGizmos()
    {
        Gizmos.color = Color.green;
        Gizmos.DrawWireCube(patrolAreaCenter, patrolAreaSize);

        if (patrolPoints != null && patrolPoints.Count > 0)
        {
            foreach (var point in patrolPoints)
            {
                Gizmos.color = Color.red;
                Gizmos.DrawSphere(point, 0.2f);
            }
        }

        // Draw sight range
        Gizmos.color = Color.blue;
        Gizmos.DrawWireSphere(transform.position, sightRange);
    }
}
